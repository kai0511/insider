// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/insider_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// coordinate_descent
vec coordinate_descent(const mat& X, const vec& y, const vec& wstart, const double& lambda, const double& alpha, const mat& XtX, const vec& Xty, const double& tol);
RcppExport SEXP _insider_coordinate_descent(SEXP XSEXP, SEXP ySEXP, SEXP wstartSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP XtXSEXP, SEXP XtySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const vec& >::type wstart(wstartSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const mat& >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< const vec& >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(coordinate_descent(X, y, wstart, lambda, alpha, XtX, Xty, tol));
    return rcpp_result_gen;
END_RCPP
}
// strong_coordinate_descent
vec strong_coordinate_descent(const mat& X, const vec& y, const vec& wstart, const double& lambda, const double& alpha, const mat& XtX, const vec& Xty, const double& tol);
RcppExport SEXP _insider_strong_coordinate_descent(SEXP XSEXP, SEXP ySEXP, SEXP wstartSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP XtXSEXP, SEXP XtySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const vec& >::type wstart(wstartSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const mat& >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< const vec& >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(strong_coordinate_descent(X, y, wstart, lambda, alpha, XtX, Xty, tol));
    return rcpp_result_gen;
END_RCPP
}
// strong_feature_sign
vec strong_feature_sign(const mat& X, const vec& y, const vec& wstart, const double& lambda, const double& alpha, const mat& XtX, const vec& Xty, const unsigned int& max_iter);
RcppExport SEXP _insider_strong_feature_sign(SEXP XSEXP, SEXP ySEXP, SEXP wstartSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP XtXSEXP, SEXP XtySEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const vec& >::type wstart(wstartSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const mat& >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< const vec& >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(strong_feature_sign(X, y, wstart, lambda, alpha, XtX, Xty, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// fit_interaction
mat fit_interaction(const mat& residual, const mat& train_indicator, const umat& cfd_indicators, const mat& column_factor, const umat& unique_cfd, const double lambda, const double alpha, const int tuning, const double& tol, const int n_cores);
RcppExport SEXP _insider_fit_interaction(SEXP residualSEXP, SEXP train_indicatorSEXP, SEXP cfd_indicatorsSEXP, SEXP column_factorSEXP, SEXP unique_cfdSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP tuningSEXP, SEXP tolSEXP, SEXP n_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type residual(residualSEXP);
    Rcpp::traits::input_parameter< const mat& >::type train_indicator(train_indicatorSEXP);
    Rcpp::traits::input_parameter< const umat& >::type cfd_indicators(cfd_indicatorsSEXP);
    Rcpp::traits::input_parameter< const mat& >::type column_factor(column_factorSEXP);
    Rcpp::traits::input_parameter< const umat& >::type unique_cfd(unique_cfdSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int >::type tuning(tuningSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type n_cores(n_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_interaction(residual, train_indicator, cfd_indicators, column_factor, unique_cfd, lambda, alpha, tuning, tol, n_cores));
    return rcpp_result_gen;
END_RCPP
}
// optimize
List optimize(const mat& data, List cfd_factors, mat& column_factor, const umat& cfd_indicators, const mat& train_indicator, const int latent_dim, const double lambda, const double alpha, const int tuning, const double global_tol, const double sub_tol, const unsigned int max_iter);
RcppExport SEXP _insider_optimize(SEXP dataSEXP, SEXP cfd_factorsSEXP, SEXP column_factorSEXP, SEXP cfd_indicatorsSEXP, SEXP train_indicatorSEXP, SEXP latent_dimSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP tuningSEXP, SEXP global_tolSEXP, SEXP sub_tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type cfd_factors(cfd_factorsSEXP);
    Rcpp::traits::input_parameter< mat& >::type column_factor(column_factorSEXP);
    Rcpp::traits::input_parameter< const umat& >::type cfd_indicators(cfd_indicatorsSEXP);
    Rcpp::traits::input_parameter< const mat& >::type train_indicator(train_indicatorSEXP);
    Rcpp::traits::input_parameter< const int >::type latent_dim(latent_dimSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int >::type tuning(tuningSEXP);
    Rcpp::traits::input_parameter< const double >::type global_tol(global_tolSEXP);
    Rcpp::traits::input_parameter< const double >::type sub_tol(sub_tolSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(optimize(data, cfd_factors, column_factor, cfd_indicators, train_indicator, latent_dim, lambda, alpha, tuning, global_tol, sub_tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// proximal_gradient
vec proximal_gradient(const mat& X, const vec& y, const vec& wstart, const double& lambda, const double& alpha, const mat& XtX, const vec& Xty, const double& tol, const int& max_iter);
RcppExport SEXP _insider_proximal_gradient(SEXP XSEXP, SEXP ySEXP, SEXP wstartSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP XtXSEXP, SEXP XtySEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const vec& >::type wstart(wstartSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const mat& >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< const vec& >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(proximal_gradient(X, y, wstart, lambda, alpha, XtX, Xty, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_insider_coordinate_descent", (DL_FUNC) &_insider_coordinate_descent, 8},
    {"_insider_strong_coordinate_descent", (DL_FUNC) &_insider_strong_coordinate_descent, 8},
    {"_insider_strong_feature_sign", (DL_FUNC) &_insider_strong_feature_sign, 8},
    {"_insider_fit_interaction", (DL_FUNC) &_insider_fit_interaction, 10},
    {"_insider_optimize", (DL_FUNC) &_insider_optimize, 12},
    {"_insider_proximal_gradient", (DL_FUNC) &_insider_proximal_gradient, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_insider(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
