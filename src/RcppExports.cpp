// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace arma;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// insider
List insider(const mat& data, List cfd_factors, mat& column_factor, const umat& cfd_indicators, const mat& train_indicator, const int latent_dim, const double lambda, const double alpha, const int tuning, double tol, int max_iter);
RcppExport SEXP _insider_insider(SEXP dataSEXP, SEXP cfd_factorsSEXP, SEXP column_factorSEXP, SEXP cfd_indicatorsSEXP, SEXP train_indicatorSEXP, SEXP latent_dimSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP tuningSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type cfd_factors(cfd_factorsSEXP);
    Rcpp::traits::input_parameter< mat& >::type column_factor(column_factorSEXP);
    Rcpp::traits::input_parameter< const umat& >::type cfd_indicators(cfd_indicatorsSEXP);
    Rcpp::traits::input_parameter< const mat& >::type train_indicator(train_indicatorSEXP);
    Rcpp::traits::input_parameter< const int >::type latent_dim(latent_dimSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int >::type tuning(tuningSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(insider(data, cfd_factors, column_factor, cfd_indicators, train_indicator, latent_dim, lambda, alpha, tuning, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// proximal_gradient
void proximal_gradient(const mat& X, const vec& y, vec& beta, const double& lambda, const double& alpha, mat XtX, const vec& Xty, const double& tol, const int& max_iter);
RcppExport SEXP _insider_proximal_gradient(SEXP XSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP XtXSEXP, SEXP XtySEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< mat >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< const vec& >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type max_iter(max_iterSEXP);
    proximal_gradient(X, y, beta, lambda, alpha, XtX, Xty, tol, max_iter);
    return R_NilValue;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _insider_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _insider_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _insider_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _insider_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_insider_insider", (DL_FUNC) &_insider_insider, 11},
    {"_insider_proximal_gradient", (DL_FUNC) &_insider_proximal_gradient, 9},
    {"_insider_rcpparma_hello_world", (DL_FUNC) &_insider_rcpparma_hello_world, 0},
    {"_insider_rcpparma_outerproduct", (DL_FUNC) &_insider_rcpparma_outerproduct, 1},
    {"_insider_rcpparma_innerproduct", (DL_FUNC) &_insider_rcpparma_innerproduct, 1},
    {"_insider_rcpparma_bothproducts", (DL_FUNC) &_insider_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_insider(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
